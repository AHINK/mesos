#include "messaging/messages.hpp"

#define DEFINE_MESSAGE(name)                    \
  char name[] = #name

namespace mesos { namespace internal {

// From framework to master.
DEFINE_MESSAGE(F2M_REGISTER_FRAMEWORK);
DEFINE_MESSAGE(F2M_REREGISTER_FRAMEWORK);
DEFINE_MESSAGE(F2M_UNREGISTER_FRAMEWORK);
DEFINE_MESSAGE(F2M_RESOURCE_OFFER_REPLY);
DEFINE_MESSAGE(F2M_REVIVE_OFFERS);
DEFINE_MESSAGE(F2M_KILL_TASK);
DEFINE_MESSAGE(F2M_FRAMEWORK_MESSAGE);
DEFINE_MESSAGE(F2M_STATUS_UPDATE_ACK);

// From master to framework.
DEFINE_MESSAGE(M2F_REGISTER_REPLY);
DEFINE_MESSAGE(M2F_RESOURCE_OFFER);
DEFINE_MESSAGE(M2F_RESCIND_OFFER);
DEFINE_MESSAGE(M2F_STATUS_UPDATE);
DEFINE_MESSAGE(M2F_LOST_SLAVE);
DEFINE_MESSAGE(M2F_FRAMEWORK_MESSAGE);
DEFINE_MESSAGE(M2F_ERROR);

// From slave to master.
DEFINE_MESSAGE(S2M_REGISTER_SLAVE);
DEFINE_MESSAGE(S2M_REREGISTER_SLAVE);
DEFINE_MESSAGE(S2M_UNREGISTER_SLAVE);
DEFINE_MESSAGE(S2M_STATUS_UPDATE);
DEFINE_MESSAGE(S2M_FRAMEWORK_MESSAGE);
DEFINE_MESSAGE(S2M_EXITED_EXECUTOR);

// From slave heart to master.
DEFINE_MESSAGE(SH2M_HEARTBEAT);

// From master to slave.
DEFINE_MESSAGE(M2S_REGISTER_REPLY);
DEFINE_MESSAGE(M2S_REREGISTER_REPLY);
DEFINE_MESSAGE(M2S_RUN_TASK);
DEFINE_MESSAGE(M2S_KILL_TASK);
DEFINE_MESSAGE(M2S_KILL_FRAMEWORK);
DEFINE_MESSAGE(M2S_FRAMEWORK_MESSAGE);
DEFINE_MESSAGE(M2S_UPDATE_FRAMEWORK);
DEFINE_MESSAGE(M2S_STATUS_UPDATE_ACK);

// From executor to slave.
DEFINE_MESSAGE(E2S_REGISTER_EXECUTOR);
DEFINE_MESSAGE(E2S_STATUS_UPDATE);
DEFINE_MESSAGE(E2S_FRAMEWORK_MESSAGE);

// From slave to executor.
DEFINE_MESSAGE(S2E_REGISTER_REPLY);
DEFINE_MESSAGE(S2E_RUN_TASK);
DEFINE_MESSAGE(S2E_KILL_TASK);
DEFINE_MESSAGE(S2E_FRAMEWORK_MESSAGE);
DEFINE_MESSAGE(S2E_KILL_EXECUTOR);

#ifdef __sun__
// From projd to slave.
DEFINE_MESSAGE(PD2S_REGISTER_PROJD);
DEFINE_MESSAGE(PD2S_PROJD_READY);

// From slave to projd.
DEFINE_MESSAGE(S2PD_UPDATE_RESOURCES);
DEFINE_MESSAGE(S2PD_KILL_ALL);
#endif // __sun__

// From master detector to processes.
DEFINE_MESSAGE(GOT_MASTER_TOKEN);
DEFINE_MESSAGE(NEW_MASTER_DETECTED);
DEFINE_MESSAGE(NO_MASTER_DETECTED);
DEFINE_MESSAGE(MASTER_DETECTION_FAILURE);

}} // namespace mesos { namespace internal {
