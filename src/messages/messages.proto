import "mesos.proto";

package mesos.internal;

// TODO(benh): It would be great if this could just be a
// TaskDescription wherever it gets used! However, doing so would
// require adding the framework_id field, the executor_id field, and
// the state field into TaskDescription though (or send them another
// way). Also, one performance reason why we don't do that now is
// because storing whatever data is coupled with a TaskDescription
// could be large and unnecessary.
message Task {
  required string name = 1;
  required TaskID task_id = 2;
  required FrameworkID framework_id = 3;
  required ExecutorID executor_id = 4;
  required SlaveID slave_id = 5;
  required TaskState state = 6;
  repeated Resource resources = 7;
}


message StatusUpdate {
  required FrameworkID framework_id = 1;
  optional ExecutorID executor_id = 2;
  optional SlaveID slave_id = 3;
  required TaskStatus status = 4;
  required double timestamp = 5;
  required int32 sequence = 6;
}


message ResourceOffer {
  required SlaveInfo slave = 1;
  repeated Resource resources = 2;
}


message ExecutorToFrameworkMessage {
  required SlaveID slave_id = 1;
  required FrameworkID framework_id = 2;
  required ExecutorID executor_id = 3;
  required bytes data = 4;
}


message FrameworkToExecutorMessage {
  required SlaveID slave_id = 1;
  required FrameworkID framework_id = 2;
  required ExecutorID executor_id = 3;
  required bytes data = 4;
}


message RegisterFrameworkMessage {
  required FrameworkInfo framework = 1;
}


message ReregisterFrameworkMessage {
  required FrameworkID framework_id = 1;
  required FrameworkInfo framework = 2;
  required int32 generation = 3;
}


message FrameworkRegisteredMessage {
  required FrameworkID framework_id = 1;
}


message UnregisterFrameworkMessage {
  required FrameworkID framework_id = 1;
}


message ResourceOfferMessage {
  required OfferID offer_id = 1;
  repeated SlaveOffer offers = 2;
  repeated string pids = 3;
}


message ResourceOfferReplyMessage {
  required FrameworkID framework_id = 1;
  required OfferID offer_id = 2;
  repeated TaskDescription tasks = 3;
  optional Params params = 4;
}


message RescindResourceOfferMessage {
  required OfferID offer_id = 1;
}


message ReviveOffersMessage {
  required FrameworkID framework_id = 1;
}


message RunTaskMessage {
  required FrameworkID framework_id = 1;
  required FrameworkInfo framework = 2;
  required string pid = 3;
  required TaskDescription task = 4;
}


message KillTaskMessage {
  required FrameworkID framework_id = 1;
  required TaskID task_id = 2;
}


message StatusUpdateMessage {
  required StatusUpdate update = 1;
  // TODO(benh): Provide PID to allow scheds to send acks directly.
  required bool reliable = 3;
}


message StatusUpdateAcknowledgementMessage {
  required SlaveID slave_id = 1;
  required FrameworkID framework_id = 2;
  required TaskID task_id = 3;
  required uint32 sequence = 4;
}


message LostSlaveMessage {
  required SlaveID slave_id = 1;
}


message FrameworkErrorMessage {
  required int32 code = 1;
  required string message = 2;
}


message RegisterSlaveMessage {
  required SlaveInfo slave = 1;
}


message ReregisterSlaveMessage {
  required SlaveID slave_id = 1;
  required SlaveInfo slave = 2;
  repeated Task tasks = 3;
}


message SlaveRegisteredMessage {
  required SlaveID slave_id = 1;
}


message SlaveReregisteredMessage {
  required SlaveID slave_id = 1;
}


message UnregisterSlaveMessage {
  required SlaveID slave_id = 1;
}


message HeartbeatMessage {
  required SlaveID slave_id = 1;
}


message KillFrameworkMessage {
  required FrameworkID framework_id = 1;
}


message UpdateFrameworkMessage {
  required FrameworkID framework_id = 1;
  required string pid = 2;
}


message RegisterExecutorMessage {
  required FrameworkID framework_id = 1;
  required ExecutorID executor_id = 2;
}


message ExecutorRegisteredMessage {
  required ExecutorArgs args = 1;
}


message ExitedExecutorMessage {
  required SlaveID slave_id = 1;
  required FrameworkID framework_id = 2;
  required ExecutorID executor_id = 3;
  required int32 status = 4;
}


message RegisterProjdMessage {
  required string project = 1;
}


message ProjdReadyMessage {
  required string project = 1;
}


message ProjdUpdateResourcesMessage {
  optional Params params = 1;
}


message FrameworkExpiredMessage {
  required FrameworkID framework_id = 1;
}


message NoMasterDetectedMessage {}

message NewMasterDetectedMessage {
  required string pid = 2;
}


message GotMasterTokenMessage {
  required string token = 1;
}


message ShutdownMessage {}