# Makefile.

SHELL = '/bin/sh'

CC = @CC@
CXX = @CXX@
SWIG = @SWIG@

CFLAGS = @CFLAGS@
CXXFLAGS = @CXXFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@

OS_NAME = @OS_NAME@

JAVA_HOME = @JAVA_HOME@

PYTHON_HEADERS = @PYTHON_HEADERS@
PYTHON_LDFLAGS = @PYTHON_LDFLAGS@

WITH_WEBUI = @WITH_WEBUI@

WEBUI_CFLAGS = @WEBUI_CFLAGS@
WEBUI_CXXFLAGS = @WEBUI_CXXFLAGS@
WEBUI_LDFLAGS = @WEBUI_LDFLAGS@

WITH_ZOOKEEPER = @WITH_ZOOKEEPER@

WITH_INCLUDED_ZOOKEEPER = @WITH_INCLUDED_ZOOKEEPER@

LIBPROCESS = third_party/libprocess

LIBEV = $(LIBPROCESS)/third_party/libev-3.8

GLOG = third_party/glog-0.3.1

ZOOKEEPER = third_party/zookeeper-3.3.1/src/c

# Ensure that we get better debugging info.
CFLAGS += -g
CXXFLAGS += -g

# Add source dir and build dir to CFLAGS and CXXFLAGS.
CFLAGS += -I@srcdir@ -I.
CXXFLAGS += -I@srcdir@ -I.

# Add include to CFLAGS and CXXFLAGS.
CFLAGS += -I@top_srcdir@/include
CXXFLAGS += -I@top_srcdir@/include

# Add boost to CFLAGS and CXXFLAGS.
CFLAGS += -I@top_srcdir@/third_party/boost-1.37.0
CXXFLAGS += -I@top_srcdir@/third_party/boost-1.37.0

# Add libprocess to CFLAGS, CXXFLAGS, and LDFLAGS.
CFLAGS += -I@top_srcdir@/$(LIBPROCESS)
CXXFLAGS += -I@top_srcdir@/$(LIBPROCESS)
LDFLAGS += -L@top_builddir@/$(LIBPROCESS)

# Add libev to LDFLAGS.
LDFLAGS += -L@top_builddir@/$(LIBEV)/.libs

# Add glog to include and lib paths.
CXXFLAGS += -I@top_srcdir@/$(GLOG)/src -I@top_builddir@/$(GLOG)/src
LDFLAGS += -L@top_builddir@/$(GLOG)/.libs

# Add included ZooKeeper to include and lib paths if necessary.
ifeq ($(WITH_INCLUDED_ZOOKEEPER),1)
  CXXFLAGS += -I@top_srcdir@/$(ZOOKEEPER)/include -I@top_srcdir@/$(ZOOKEEPER)/generated
  LDFLAGS += -L@top_builddir@/$(ZOOKEEPER)/.libs
endif

# Add dependency tracking to CFLAGS, CXXFLAGS.
CFLAGS += -MMD -MP
CXXFLAGS += -MMD -MP

# Add build date to CFLAGS, CXXFLAGS
CFLAGS += -DBUILD_DATE="\"$$(date '+%Y-%m-%d %H:%M:%S')\""
CXXFLAGS += -DBUILD_DATE="\"$$(date '+%Y-%m-%d %H:%M:%S')\""

# Add build user to CFLAGS, CXXFLAGS
CFLAGS += -DBUILD_USER="\"$$USER\""
CXXFLAGS += -DBUILD_USER="\"$$USER\""

# Add libev to LDFLAGS.
LDFLAGS += -L$(LIBEV)/.libs

# Add glog, libev, libprocess, pthread, and dl to LIBS.
LIBS += -lglog -lprocess -lev -lpthread -ldl

# Add ZooKeeper if necessary.
ifeq ($(WITH_ZOOKEEPER),1)
  LIBS += -lzookeeper_st
endif

MASTER_OBJ = master/master.o master/allocator_factory.o master/simple_allocator.o

SLAVE_OBJ = slave/slave.o launcher/launcher.o slave/isolation_module.o	\
	    slave/process_based_isolation_module.o

ifeq ($(OS_NAME),solaris)
  SLAVE_OBJ += slave/solaris_project_isolation_module.o
endif

ifeq ($(OS_NAME),linux)
  SLAVE_OBJ += slave/lxc_isolation_module.o
endif

MASTER_WEBUI_OBJ = master/webui.o
MASTER_SWIG_WEBUI_OBJ = webui/master/swig/master_wrap.o

SLAVE_WEBUI_OBJ = slave/webui.o
SLAVE_SWIG_WEBUI_OBJ = webui/slave/swig/slave_wrap.o

WEBUI_OBJ = $(MASTER_WEBUI_OBJ) $(SLAVE_WEBUI_OBJ)
SWIG_WEBUI_OBJ = $(MASTER_SWIG_WEBUI_OBJ) $(SLAVE_SWIG_WEBUI_OBJ)

COMMON_OBJ = common/fatal.o messaging/messages.o common/lock.o		\
	     detector/detector.o common/params.o			\
	     detector/url_processor.o configurator/configurator.o	\
	     common/string_utils.o common/logging.o

ifeq ($(WITH_ZOOKEEPER),1)
  COMMON_OBJ += detector/zookeeper.o
endif

EXEC_LIB_OBJ = exec/exec.o
SCHED_LIB_OBJ = sched/sched.o local/local.o

BASIC_OBJ = $(MASTER_OBJ) $(SLAVE_OBJ) $(COMMON_OBJ)  \
	    $(SCHED_LIB_OBJ) $(EXEC_LIB_OBJ)

ALL_OBJ = $(BASIC_OBJ) $(WEBUI_OBJ) $(SWIG_WEBUI_OBJ)

MESOS_EXES = mesos-master mesos-slave mesos-local mesos-launcher mesos-getconf

ifeq ($(OS_NAME),solaris)
  MESOS_EXES += mesos-projd
endif

MESOS_SCHED_LIB = libmesos_sched.a
MESOS_EXEC_LIB = libmesos_exec.a

# C/C++ shared library which contains both the scheduler and executor
# libraries, in addition to libglog, libprocess, and libev.
ifeq ($(OS_NAME),darwin)
  MESOS_LIB = libmesos.dylib
else
  MESOS_LIB = libmesos.so
endif

MESOS_LIBS = $(MESOS_LIB) $(MESOS_SCHED_LIB) $(MESOS_EXEC_LIB)

# Java and Python shared libraries which contain the everything in
# MESOS_LIB as well as the SWIG wrappers (note, Java requires the use
# of the .dylib suffix on Mac OS X, but at the time Python required
# the .so suffix even on Mac OS X).
ifeq ($(OS_NAME),darwin)
  MESOS_JAVA_LIB = swig/java/libmesos.dylib
else
  MESOS_JAVA_LIB = swig/java/libmesos.so
endif

MESOS_PYTHON_LIB = swig/python/_mesos.so

# In the event we are building in a directory other than source we
# need to copy over the webui stuff so that the binaries can be run.
WEBUI_FILES = webui/bottle-0.5.6 webui/common/webui_lib.py	\
              webui/master/framework.tpl webui/master/index.tpl	\
              webui/master/webui.py webui/slave/framework.tpl	\
              webui/slave/index.tpl webui/slave/webui.py	\
              webui/static/stylesheet.css

# Create all the directories that we use but don't get created by
# default because we don't have a Makefile.in in them.
$(shell mkdir -p common)
$(shell mkdir -p configurator)
$(shell mkdir -p detector)
$(shell mkdir -p exec)
$(shell mkdir -p launcher)
$(shell mkdir -p local)
$(shell mkdir -p master)
$(shell mkdir -p messaging)
$(shell mkdir -p sched)
$(shell mkdir -p slave)
$(shell mkdir -p webui/common)
$(shell mkdir -p webui/master)
$(shell mkdir -p webui/slave)
$(shell mkdir -p webui/static)


default: all

-include $(patsubst %.o, %.d, $(ALL_OBJ))
-include $(patsubst %, %.d, $(MESOS_EXES))

$(BASIC_OBJ): %.o: @srcdir@/%.cpp
	$(CXX) -c $(CXXFLAGS) -o $@ $<

$(MESOS_LIBS): $(COMMON_OBJ)

$(MESOS_SCHED_LIB): $(SCHED_LIB_OBJ) $(MASTER_OBJ) $(SLAVE_OBJ)
	$(AR) rcs $@ $^

$(MESOS_EXEC_LIB): $(EXEC_LIB_OBJ)
	$(AR) rcs $@ $^

$(MESOS_LIB): $(SCHED_LIB_OBJ) $(MASTER_OBJ) $(SLAVE_OBJ) $(EXEC_LIB_OBJ)
	$(CXX) $(CXXFLAGS) -shared -o $@ $^ $(LDFLAGS) $(LIBS)

$(WEBUI_OBJ): %.o: @srcdir@/%.cpp
	$(CXX) -c $(CXXFLAGS) $(WEBUI_CXXFLAGS) -o $@ $<

$(SWIG_WEBUI_OBJ): %.o: %.cpp
	$(CXX) -c $(CXXFLAGS) $(WEBUI_CXXFLAGS) -o $@ $<

webui/master/swig/master_wrap.cpp: @srcdir@/webui/master/swig/master.i @srcdir@/master/state.hpp @srcdir@/master/webui.hpp @srcdir@/master/master.hpp config/config.hpp
ifeq ($(WITH_WEBUI),1)
	mkdir -p webui/master/swig
	$(SWIG) -c++ -python -outdir webui/master/swig -I@top_srcdir@/include -I@srcdir@ -o $@ $<
else
	echo "" > $@
endif

webui/slave/swig/slave_wrap.cpp: @srcdir@/webui/slave/swig/slave.i @srcdir@/slave/state.hpp @srcdir@/slave/webui.hpp @srcdir@/slave/slave.hpp config/config.hpp
ifeq ($(WITH_WEBUI),1)
	mkdir -p webui/slave/swig
	$(SWIG) -c++ -python -outdir webui/slave/swig -I@top_srcdir@/include -I@srcdir@ -o $@ $<
else
	echo "" > $@
endif

$(MESOS_EXES): $(COMMON_OBJ)

mesos-master: @srcdir@/master/main.cpp $(MASTER_OBJ) $(MASTER_WEBUI_OBJ) $(MASTER_SWIG_WEBUI_OBJ)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS) $(WEBUI_LDFLAGS) $(LIBS)

mesos-slave: @srcdir@/slave/main.cpp $(SLAVE_OBJ) $(SLAVE_WEBUI_OBJ) $(SLAVE_SWIG_WEBUI_OBJ)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS) $(WEBUI_LDFLAGS) $(LIBS)

mesos-launcher: @srcdir@/launcher/main.cpp launcher/launcher.o
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

mesos-projd: @srcdir@/slave/projd.cpp
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

mesos-local: @srcdir@/local/main.cpp local/local.o $(MASTER_OBJ) $(SLAVE_OBJ)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

mesos-getconf: @srcdir@/configurator/get_conf.cpp
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

java: $(MESOS_JAVA_LIB) swig/java/mesos.jar

python: $(MESOS_PYTHON_LIB)

swig/java/mesos.jar: $(MESOS_JAVA_LIB)
ifdef JAVA_HOME
	$(JAVA_HOME)/bin/javac -sourcepath swig/java -d swig/java swig/java/mesos/*.java
	patch -N swig/java/mesos/mesosJNI.java < @srcdir@/swig/java/mesosJNI.java.patch1 || echo -n
	patch swig/java/mesos/mesosJNI.java < @srcdir@/swig/java/mesosJNI.java.patch2 || echo -n
	$(JAVA_HOME)/bin/jar cf $@ -C swig/java mesos
endif

$(MESOS_JAVA_LIB): @srcdir@/swig/mesos.i $(MESOS_SCHED_LIB) $(MESOS_EXEC_LIB)
ifdef JAVA_HOME
	rm -f swig/java/mesos/*
	mkdir -p swig/java/mesos
	$(SWIG) -c++ -java -I@top_srcdir@/include -o swig/java/mesos_wrap.cpp -outdir swig/java/mesos -package mesos @srcdir@/swig/mesos.i
	$(CXX) $(CXXFLAGS) -I$(JAVA_HOME)/include -I$(JAVA_HOME)/include/$(OS_NAME) -shared -o $@ swig/java/mesos_wrap.cpp $(MESOS_SCHED_LIB) $(MESOS_EXEC_LIB) $(LDFLAGS) $(LIBS)
endif

$(MESOS_PYTHON_LIB): @srcdir@/swig/mesos.i $(MESOS_SCHED_LIB) $(MESOS_EXEC_LIB)
ifdef PYTHON_HEADERS
	mkdir -p swig/python
	$(SWIG) -c++ -python -threads -I@top_srcdir@/include -o swig/python/mesos_wrap.cpp -outdir swig/python @srcdir@/swig/mesos.i
	$(CXX) $(CXXFLAGS) -I$(PYTHON_HEADERS) -shared -o $@ swig/python/mesos_wrap.cpp $(MESOS_SCHED_LIB) $(MESOS_EXEC_LIB) $(LDFLAGS) $(PYTHON_LDFLAGS) $(LIBS)
endif

$(WEBUI_FILES): %: @srcdir@/%
ifeq ($(WITH_WEBUI),1)
	cp -r @srcdir@/$@ $@
endif

test: all
	$(MAKE) -C tests test

all: $(MESOS_LIBS) $(MESOS_EXES) java python $(WEBUI_FILES)
	$(MAKE) -C examples
	$(MAKE) -C tests

clean:
	$(MAKE) -C examples clean
	$(MAKE) -C tests clean
	rm -f $(patsubst %.o, %.d, $(ALL_OBJ))
	rm -f $(patsubst %, %.d, $(MESOS_EXES))
	rm -rf $(patsubst %, %.dSYM, $(MESOS_EXES))
	rm -f $(ALL_OBJ)
	rm -f $(MESOS_EXES) $(MESOS_LIBS)
	rm -f $(MESOS_JAVA_LIB) $(MESOS_PYTHON_LIB)
	rm -rf $(MESOS_JAVA_LIB).dSYM $(MESOS_PYTHON_LIB).dSYM
	rm -f swig/*/mesos_wrap.cpp
	rm -f swig/*/mesos_wrap.h
	rm -f swig/*/*.o
	rm -f swig/*/*.d
	rm -f swig/java/mesos.jar
	rm -f swig/java/mesos/*
	rm -f swig/java/*.class
	rm -f swig/python/mesos.py
	rm -f swig/python/mesos.pyc
	rm -f webui/master/swig/master_wrap.h
	rm -f webui/master/swig/master_wrap.cpp
	rm -f webui/master/swig/master_wrap.o
	rm -f webui/master/swig/master_wrap.d
	rm -f webui/master/swig/master.py
	rm -f webui/master/swig/master.pyc
	rm -f webui/slave/swig/slave_wrap.h
	rm -f webui/slave/swig/slave_wrap.cpp
	rm -f webui/slave/swig/slave_wrap.o
	rm -f webui/slave/swig/slave_wrap.d
	rm -f webui/slave/swig/slave.py
	rm -f webui/slave/swig/slave.pyc
	rm -f TAGS

.PHONY: default java python test all clean
